# Generated by Django 4.1.3 on 2022-12-14 12:27

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, region=None
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Currency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("abbreviation", models.CharField(max_length=5)),
                ("sign", models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name="Cryptocurrency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "balance",
                    models.DecimalField(
                        decimal_places=8, default=Decimal("0"), max_digits=1000000
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cryptocurrencies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Cash",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("balance", models.FloatField(default=0.0)),
                (
                    "currency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="cash",
                        to="manager.currency",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cash",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "cash",
                "verbose_name_plural": "cash",
            },
        ),
        migrations.CreateModel(
            name="Card",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bank_name", models.CharField(max_length=50)),
                ("type", models.CharField(max_length=50)),
                ("balance", models.FloatField(default=0.0)),
                (
                    "currency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="cards",
                        to="manager.currency",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["bank_name"],
            },
        ),
        migrations.CreateModel(
            name="Accountancy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "IO",
                    models.CharField(
                        choices=[("I", "Income"), ("O", "Outcome")],
                        default="O",
                        max_length=1,
                    ),
                ),
                ("IO_type", models.CharField(max_length=50)),
                ("amount", models.FloatField()),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "card",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accountancy",
                        to="manager.card",
                    ),
                ),
                (
                    "cash",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accountancy",
                        to="manager.cash",
                    ),
                ),
                (
                    "cryptocurrency",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accountancy",
                        to="manager.cryptocurrency",
                    ),
                ),
            ],
            options={
                "ordering": ["-datetime"],
            },
        ),
        migrations.AddConstraint(
            model_name="cryptocurrency",
            constraint=models.UniqueConstraint(
                fields=("user", "name"), name="unique_user_cryptocurrencies"
            ),
        ),
        migrations.AddConstraint(
            model_name="cryptocurrency",
            constraint=models.CheckConstraint(
                check=models.Q(("balance__gte", 0)),
                name="positive_cryptocurrency_balance",
            ),
        ),
        migrations.AddConstraint(
            model_name="cash",
            constraint=models.UniqueConstraint(
                fields=("user", "currency"), name="unique_user_cash"
            ),
        ),
        migrations.AddConstraint(
            model_name="cash",
            constraint=models.CheckConstraint(
                check=models.Q(("balance__gte", 0)), name="positive_cash_balance"
            ),
        ),
        migrations.AddConstraint(
            model_name="card",
            constraint=models.UniqueConstraint(
                fields=("user", "bank_name", "type"), name="unique_user_cards"
            ),
        ),
        migrations.AddConstraint(
            model_name="card",
            constraint=models.CheckConstraint(
                check=models.Q(("balance__gte", 0)), name="positive_card_balance"
            ),
        ),
        migrations.AddConstraint(
            model_name="accountancy",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("card__isnull", False),
                        ("cash__isnull", True),
                        ("cryptocurrency__isnull", True),
                    ),
                    models.Q(
                        ("card__isnull", True),
                        ("cash__isnull", False),
                        ("cryptocurrency__isnull", True),
                    ),
                    models.Q(
                        ("card__isnull", True),
                        ("cash__isnull", True),
                        ("cryptocurrency__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="only_one_wallet",
            ),
        ),
        migrations.AddConstraint(
            model_name="accountancy",
            constraint=models.CheckConstraint(
                check=models.Q(("amount__gte", 0)), name="positive_amount"
            ),
        ),
    ]
